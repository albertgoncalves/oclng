fib n {
    let x (alloc 1);
    let scope (alloc 2);
    seta scope 0 0;
    seta scope 1 1;
    let loop \scope n {
        switch (= n 0) {
            let a (deref scope 0);
            let b (deref scope 1);
            seta scope 0 b;
            seta scope 1 (+ a b);
            (loop scope (- n 1))
        } {
            (deref scope 0)
        }
    };
    (print_stack);
    (loop scope n)
}

entry {
    # TODO: These two integers have the same values as the two pointers in the
    # prior function. As such, the garbage-collector is fooled into thinking
    # those allocations are still alive, and is unable to free memory that is
    # genuinely out of scope. We can fix this by sacrificing a single bit when
    # dealing with raw integers, similar to what OCaml does. This would entail
    # doing some masking and bit-shifting whenever handling integers.
    let x 4211048;
    let y 4211064;
    (printf "%ld\n" (fib 51));
    (free);
    0
}
